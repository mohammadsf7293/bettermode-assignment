scalar Date

type Query {
  # Fetch all tweets
  tweets: [Tweet!]!

  # Fetch a single tweet by its ID
  tweet(id: ID!): Tweet

  # Fetch tweets by a specific author
  tweetsByAuthor(authorId: ID!): [Tweet!]!
}

type Mutation {
  # Create a new tweet
  createTweet(createTweetInput: CreateTweetInput!): Tweet!

  # Update an existing tweet
  updateTweet(id: ID!, input: UpdateTweetInput!): Tweet!

  # Remove a tweet
  removeTweet(id: ID!): Boolean!

  updateTweetPermissions(input: UpdateTweetPermissions!): Boolean!
}

type Tweet {
  id: ID!
  content: String!
  author: User!
  hashtags: [Hashtag!]!
  location: String
  category: String
  parentTweet: Tweet
  childTweets: [Tweet!]!
  createTime: Date!
  updateTime: Date!
}

type Hashtag {
  id: ID!
  name: String!
}

input CreateTweetInput {
  content: String!
  authorId: ID!
  hashtags: [String!]!
  location: String
  category: String
  parentTweetId: ID
}

input UpdateTweetInput {
  content: String
  location: String
  category: String
}

input UpdateTweetPermissions {
  inheritViewPermissions: Boolean!
  inheritEditPermissions: Boolean!
  viewPermissions: [String!]!
  editPermissions: [String!]!
}
