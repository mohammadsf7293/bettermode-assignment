scalar Date

type Query {
  # Fetch all tweets
  tweets: [Tweet!]!

  # Fetch a single tweet by its ID
  tweet(id: ID!): Tweet

  # Fetch tweets by a specific author
  tweetsByAuthor(authorId: ID!): [Tweet!]!
  
  # Checking editability of a tweet by a special userId
  canEditTweet(userId: Int!, tweetId: String!): Boolean!

  paginateTweets(userId: Int!, limit: Int!, page: Int!): PaginatedTweets!
}

type Mutation {
  # Create a new tweet
  createTweet(createTweetInput: CreateTweetInput!): Tweet!

  # Update an existing tweet
  updateTweet(id: ID!, input: UpdateTweetInput!): Tweet!

  # Remove a tweet
  removeTweet(id: ID!): Boolean!

  updateTweetPermissions(id: ID!, userId: ID!, input: UpdateTweetPermissions!): Boolean!
}

enum TweetCategory {
	Sport
	Finance
	Tech
	News
}

type Tweet {
  id: String!
  content: String!
  authorId: ID!
  hashtags: [String!]!
  location: String
  category: TweetCategory
  parentTweetId: String
  createTime: Int!
  updateTime: Int!
}

input CreateTweetInput {
  content: String!
  authorId: ID!
  hashtags: [String!]!
  location: String
  category: String
  parentTweetId: ID
}

type PaginatedTweets {
  nodes: [Tweet!]!
  hasNextPage: Boolean!
}

input UpdateTweetInput {
  content: String
  location: String
  category: String
}

input UpdateTweetPermissions {
  """
  Whether the tweet inherits view permissions from its parent.
  """
  inheritViewPermissions: Boolean!

  """
  Whether the tweet inherits edit permissions from its parent.
  """
  inheritEditPermissions: Boolean!

  """
  A list of user IDs that have view permissions for the tweet.
  """
  viewPermissionsUserIds: [Int!]!

  """
  A list of group IDs that have view permissions for the tweet.
  """
  viewPermissionsGroupIds: [Int!]!

  """
  A list of user IDs that have edit permissions for the tweet.
  """
  editPermissionsUserIds: [Int!]!

  """
  A list of group IDs that have edit permissions for the tweet.
  """
  editPermissionsGroupIds: [Int!]!
}
